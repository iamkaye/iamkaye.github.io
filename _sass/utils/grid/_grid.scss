// Grid SASS

%grid {
    letter-spacing: -0.3125em;
    width: 100%;
    text-rendering: optimizespeed;
}
%grid_item {
    display: inline-block;
    letter-spacing: normal;
    position: relative;
    vertical-align: top;
    text-rendering: auto;
}

@function calculate_width($fraction) {
    @return $fraction * $width;
}

@mixin width($fraction, $gutter: null) {
    width: calculate_width($fraction);

    @if $gutter {
        padding: $gutter;
    }
}

// Generate grid container.
@mixin generate_grid_container {
    // Grid class container
    .grid {
        @include display_flex();
        @include flex_wrap(wrap);
        text-rendering: optimizespeed;

        // Browsers that do not support flexbox
        letter-spacing: -0.31em;
        width: $width;

        // Grid class items
        & > .grid-item {
            @include flex(1);
            text-rendering: auto;

            // Browsers that do not support flexbox
            display: inline-block;
            letter-spacing: normal;
            position: relative;
            vertical-align: top;
        }
    }
}

// Generate grid items.
@mixin generate_grid_item($width, $columns) {
    .grid-fit > .grid-item {
        @include flex(1);
    }
    .grid-custom > .grid-item {
        @include flex(none);
    }
    .grid-full > .grid-item {
        @include flex(0 0 $width);
        width: $width;
    }

    // Iterate for 'grid-of-{2-$columns}'
    @for $i from 2 through $columns {
        // Grid of 2 through $columns
        .grid-of-#{$i} > .grid-item {
            @include flex(0 0 $width / $i);
            width: $width / $i;
        }
    }
}

@mixin generate_responsive_grid($width, $columns) {
    // Iterate through the different browser widths.
    @each $identifier, $size in $browser_widths {
        // Include with media query.
        @include media_query($size) {
            .#{$identifier}-grid-fit > .grid-item {
                @include flex(1);
            }
            .#{$identifier}-grid-custom > .grid-item {
                @include flex(none);
            }
            .#{$identifier}-grid-full > .grid-item {
                @include flex(0 0 $width);
                width: $width;
            }

            // Iterate for 'grid-of-{2-$columns}'
            @for $i from 2 through $columns {
                // Grid of 2 through $columns
                .#{$identifier}-grid-of-#{$i} > .grid-item {
                    @include flex(0 0 $width / $i);
                    width: $width / $i;
                }
            }
        }
    }
}